"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[666],{8979:(a,e,t)=>{t.d(e,{Ay:()=>l,Ez:()=>d,NC:()=>n,VE:()=>i});var r=t(5710),s=t(96809);let i=(0,r.zD)("analytics/fetchAnalytics",async(a,e)=>{let{rejectWithValue:t}=e;try{return(await s.K.get("/analytics/user")).data}catch(a){var r,i;return t((null==(i=a.response)||null==(r=i.data)?void 0:r.detail)||"Failed to fetch analytics")}}),d=(0,r.zD)("analytics/fetchMessageVolume",async(a,e)=>{let{days:t=7}=a,{rejectWithValue:r}=e;try{return(await s.K.get("/analytics/message-volume?days=".concat(t))).data}catch(a){var i,d;return r((null==(d=a.response)||null==(i=d.data)?void 0:i.detail)||"Failed to fetch message volume")}}),n=(0,r.zD)("analytics/fetchErrorSummary",async(a,e)=>{let{days:t=7}=a,{rejectWithValue:r}=e;try{return(await s.K.get("/analytics/errors?days=".concat(t))).data}catch(a){var i,d;return r((null==(d=a.response)||null==(i=d.data)?void 0:i.detail)||"Failed to fetch error summary")}}),o=(0,r.Z0)({name:"analytics",initialState:{stats:null,messageVolume:[],errorSummary:[],isLoading:!1,error:null},reducers:{clearError:a=>{a.error=null}},extraReducers:a=>{a.addCase(i.pending,a=>{a.isLoading=!0,a.error=null}).addCase(i.fulfilled,(a,e)=>{a.isLoading=!1,a.stats=e.payload}).addCase(i.rejected,(a,e)=>{a.isLoading=!1,a.error=e.payload}).addCase(d.fulfilled,(a,e)=>{a.messageVolume=e.payload}).addCase(d.rejected,(a,e)=>{a.error=e.payload}).addCase(n.fulfilled,(a,e)=>{a.errorSummary=e.payload}).addCase(n.rejected,(a,e)=>{a.error=e.payload})}}),{clearError:c}=o.actions,l=o.reducer},20666:(a,e,t)=>{t.d(e,{M_:()=>y,jL:()=>f,GV:()=>w});var r=t(5710),s=t(34540),i=t(89519),d=t(77409);let n=(0,r.Z0)({name:"notifications",initialState:{notifications:[]},reducers:{addNotification:(a,e)=>{let t={...e.payload,id:Date.now().toString(),timestamp:Date.now(),read:!1};a.notifications.unshift(t)},markAsRead:(a,e)=>{let t=a.notifications.find(a=>a.id===e.payload);t&&(t.read=!0)},removeNotification:(a,e)=>{a.notifications=a.notifications.filter(a=>a.id!==e.payload)},clearAllNotifications:a=>{a.notifications=[]}}}),{addNotification:o,markAsRead:c,removeNotification:l,clearAllNotifications:u}=n.actions,p=n.reducer;var h=t(84028),g=t(8979);let y=(0,r.U1)({reducer:{auth:i.Ay,dashboard:d.Ay,notifications:p,forwarding:h.Ay,analytics:g.Ay},middleware:a=>a({serializableCheck:{ignoredActions:["persist/PERSIST"]}})}),f=()=>(0,s.wA)(),w=s.d4},77409:(a,e,t)=>{t.d(e,{Ay:()=>p,ER:()=>n,DA:()=>d,T5:()=>c,$m:()=>l});var r=t(5710),s=t(59959);let i={getUserStats:async()=>(await s.F.get("/analytics/user-stats")).data,getSystemHealth:async()=>(await s.F.get("/health")).data},d=(0,r.zD)("dashboard/fetchUserStats",async(a,e)=>{let{rejectWithValue:t}=e;try{return await i.getUserStats()}catch(a){return t(a.message||"Failed to fetch user stats")}}),n=(0,r.zD)("dashboard/fetchSystemHealth",async(a,e)=>{let{rejectWithValue:t}=e;try{return await i.getSystemHealth()}catch(a){return t(a.message||"Failed to fetch system health")}}),o=(0,r.Z0)({name:"dashboard",initialState:{stats:null,health:null,isLoading:!1},reducers:{updateForwardingPairStatus:(a,e)=>{let{pairId:t,status:r,lastForwarded:s}=e.payload;a.stats},updateStats:(a,e)=>{let{queueStats:t}=e.payload;a.stats&&(a.stats={...a.stats,...t})},updateRealTimeMetrics:(a,e)=>{let t=e.payload;a.stats&&(a.stats={...a.stats,...t})}},extraReducers:a=>{a.addCase(d.pending,a=>{a.isLoading=!0}).addCase(d.fulfilled,(a,e)=>{a.isLoading=!1,a.stats=e.payload}).addCase(d.rejected,a=>{a.isLoading=!1}).addCase(n.fulfilled,(a,e)=>{a.health=e.payload})}}),{updateForwardingPairStatus:c,updateStats:l,updateRealTimeMetrics:u}=o.actions,p=o.reducer},84028:(a,e,t)=>{t.d(e,{kq:()=>c,Ay:()=>_,Ve:()=>u,he:()=>o,v:()=>l});var r=t(5710),s=t(23464);let i="https://your-backend-domain.com";class d{getAuthHeaders(){let a=localStorage.getItem("access_token");return{Authorization:"Bearer ".concat(a),"Content-Type":"application/json"}}async getForwardingPairs(){return(await s.A.get("".concat(i,"/api/forwarding/pairs"),{headers:this.getAuthHeaders()})).data}async createForwardingPair(a){return(await s.A.post("".concat(i,"/api/forwarding/pairs"),a,{headers:this.getAuthHeaders()})).data}async updateForwardingPair(a,e){return(await s.A.patch("".concat(i,"/api/forwarding/pairs/").concat(a),e,{headers:this.getAuthHeaders()})).data}async deleteForwardingPair(a){await s.A.delete("".concat(i,"/api/forwarding/pairs/").concat(a),{headers:this.getAuthHeaders()})}async pauseForwardingPair(a){return(await s.A.post("".concat(i,"/api/forwarding/pairs/").concat(a,"/pause"),{},{headers:this.getAuthHeaders()})).data}async resumeForwardingPair(a){return(await s.A.post("".concat(i,"/api/forwarding/pairs/").concat(a,"/resume"),{},{headers:this.getAuthHeaders()})).data}async bulkPairOperation(a){await s.A.post("".concat(i,"/api/forwarding/pairs/bulk"),a,{headers:this.getAuthHeaders()})}async getTelegramAccounts(){return(await s.A.get("".concat(i,"/api/accounts/telegram"),{headers:this.getAuthHeaders()})).data}async getDiscordAccounts(){return(await s.A.get("".concat(i,"/api/accounts/discord"),{headers:this.getAuthHeaders()})).data}async addTelegramAccount(a){return(await s.A.post("".concat(i,"/api/accounts/telegram"),{phone_number:a},{headers:this.getAuthHeaders()})).data}async verifyTelegramOTP(a,e){return(await s.A.post("".concat(i,"/api/accounts/telegram/verify"),{phone_number:a,otp_code:e},{headers:this.getAuthHeaders()})).data}async removeTelegramAccount(a){await s.A.delete("".concat(i,"/api/accounts/telegram/").concat(a),{headers:this.getAuthHeaders()})}async addDiscordAccount(a){return(await s.A.post("".concat(i,"/api/accounts/discord"),{discord_token:a},{headers:this.getAuthHeaders()})).data}async removeDiscordAccount(a){await s.A.delete("".concat(i,"/api/accounts/discord/").concat(a),{headers:this.getAuthHeaders()})}async getTelegramChannels(a){return(await s.A.get("".concat(i,"/api/accounts/telegram/").concat(a,"/channels"),{headers:this.getAuthHeaders()})).data}async getDiscordServers(a){return(await s.A.get("".concat(i,"/api/accounts/discord/").concat(a,"/servers"),{headers:this.getAuthHeaders()})).data}async getQueueStatus(){return(await s.A.get("".concat(i,"/api/analytics/queue-status"),{headers:this.getAuthHeaders()})).data}async getSessionHealth(){return(await s.A.get("".concat(i,"/api/analytics/session-health"),{headers:this.getAuthHeaders()})).data}async getPlanLimits(){return(await s.A.get("".concat(i,"/api/forwarding/plan-limits"),{headers:this.getAuthHeaders()})).data}startRealTimeSync(a){let e=[];if(a.onPairUpdate){let t=setInterval(async()=>{try{(await this.getForwardingPairs()).forEach(a.onPairUpdate)}catch(a){console.error("Failed to fetch pair updates:",a)}},1e4);e.push(t)}if(a.onSessionHealthUpdate){let t=setInterval(async()=>{try{let e=await this.getSessionHealth();a.onSessionHealthUpdate(e)}catch(a){console.error("Failed to fetch session health:",a)}},3e4);e.push(t)}if(a.onQueueStatusUpdate){let t=setInterval(async()=>{try{let e=await this.getQueueStatus();a.onQueueStatusUpdate(e)}catch(a){console.error("Failed to fetch queue status:",a)}},15e3);e.push(t)}return()=>{e.forEach(clearInterval)}}}let n=new d,o=(0,r.zD)("forwarding/fetchPairs",async()=>await n.getForwardingPairs()),c=(0,r.zD)("forwarding/createPair",async a=>await n.createForwardingPair(a)),l=(0,r.zD)("forwarding/updatePair",async a=>{let{pairId:e,updates:t}=a;return await n.updateForwardingPair(e,t)}),u=(0,r.zD)("forwarding/deletePair",async a=>(await n.deleteForwardingPair(a),a)),p=(0,r.zD)("forwarding/pausePair",async a=>await n.pauseForwardingPair(a)),h=(0,r.zD)("forwarding/resumePair",async a=>await n.resumeForwardingPair(a)),g=(0,r.zD)("forwarding/bulkOperation",async a=>(await n.bulkPairOperation(a),a)),y=(0,r.zD)("forwarding/fetchTelegramAccounts",async()=>await n.getTelegramAccounts()),f=(0,r.zD)("forwarding/fetchDiscordAccounts",async()=>await n.getDiscordAccounts());(0,r.zD)("forwarding/addTelegramAccount",async a=>await n.addTelegramAccount(a));let w=(0,r.zD)("forwarding/verifyTelegramOTP",async a=>{let{phoneNumber:e,otpCode:t}=a;return await n.verifyTelegramOTP(e,t)}),m=(0,r.zD)("forwarding/removeTelegramAccount",async a=>(await n.removeTelegramAccount(a),a)),A=(0,r.zD)("forwarding/addDiscordAccount",async a=>await n.addDiscordAccount(a)),S=(0,r.zD)("forwarding/removeDiscordAccount",async a=>(await n.removeDiscordAccount(a),a)),v=(0,r.zD)("forwarding/fetchQueueStatus",async()=>await n.getQueueStatus()),C=(0,r.zD)("forwarding/fetchSessionHealth",async()=>await n.getSessionHealth()),D=(0,r.zD)("forwarding/fetchPlanLimits",async()=>await n.getPlanLimits()),P=(0,r.Z0)({name:"forwarding",initialState:{pairs:[],telegramAccounts:[],discordAccounts:[],selectedAccount:null,isLoading:!1,error:null,queueStatus:null,sessionHealth:null,planLimits:null},reducers:{setSelectedAccount:(a,e)=>{a.selectedAccount=e.payload},clearError:a=>{a.error=null},updatePairStatus:(a,e)=>{let{pairId:t,status:r}=e.payload,s=a.pairs.find(a=>a.id===t);s&&(s.queue_status=r)},updateSessionHealth:(a,e)=>{a.sessionHealth=e.payload,e.payload.telegram_sessions&&Object.entries(e.payload.telegram_sessions).forEach(e=>{let[t,r]=e,s=a.telegramAccounts.find(a=>a.id===parseInt(t));s&&(s.status=r.status)}),e.payload.discord_sessions&&Object.entries(e.payload.discord_sessions).forEach(e=>{let[t,r]=e,s=a.discordAccounts.find(a=>a.id===parseInt(t));s&&(s.status=r.status)})},updateQueueStatus:(a,e)=>{a.queueStatus=e.payload}},extraReducers:a=>{a.addCase(o.pending,a=>{a.isLoading=!0,a.error=null}).addCase(o.fulfilled,(a,e)=>{a.isLoading=!1,a.pairs=e.payload}).addCase(o.rejected,(a,e)=>{a.isLoading=!1,a.error=e.error.message||"Failed to fetch forwarding pairs"}).addCase(c.fulfilled,(a,e)=>{a.pairs.push(e.payload)}).addCase(l.fulfilled,(a,e)=>{let t=a.pairs.findIndex(a=>a.id===e.payload.id);-1!==t&&(a.pairs[t]=e.payload)}).addCase(u.fulfilled,(a,e)=>{a.pairs=a.pairs.filter(a=>a.id!==e.payload)}).addCase(p.fulfilled,(a,e)=>{let t=a.pairs.findIndex(a=>a.id===e.payload.id);-1!==t&&(a.pairs[t]=e.payload)}).addCase(h.fulfilled,(a,e)=>{let t=a.pairs.findIndex(a=>a.id===e.payload.id);-1!==t&&(a.pairs[t]=e.payload)}).addCase(g.fulfilled,(a,e)=>{let{action:t,pair_ids:r}=e.payload;"delete"===t?a.pairs=a.pairs.filter(a=>!r.includes(a.id)):a.pairs.forEach(a=>{r.includes(a.id)&&(a.is_active="resume"===t)})}),a.addCase(y.fulfilled,(a,e)=>{a.telegramAccounts=e.payload}).addCase(w.fulfilled,(a,e)=>{a.telegramAccounts.push(e.payload)}).addCase(m.fulfilled,(a,e)=>{a.telegramAccounts=a.telegramAccounts.filter(a=>a.id!==e.payload)}),a.addCase(f.fulfilled,(a,e)=>{a.discordAccounts=e.payload}).addCase(A.fulfilled,(a,e)=>{a.discordAccounts.push(e.payload)}).addCase(S.fulfilled,(a,e)=>{a.discordAccounts=a.discordAccounts.filter(a=>a.id!==e.payload)}),a.addCase(v.fulfilled,(a,e)=>{a.queueStatus=e.payload}).addCase(C.fulfilled,(a,e)=>{a.sessionHealth=e.payload}).addCase(D.fulfilled,(a,e)=>{a.planLimits=e.payload}),a.addMatcher(a=>a.type.endsWith("/rejected"),(a,e)=>{var t;a.isLoading=!1,a.error=(null==(t=e.error)?void 0:t.message)||"An error occurred"})}}),{setSelectedAccount:H,clearError:z,updatePairStatus:F,updateSessionHealth:T,updateQueueStatus:k}=P.actions,_=P.reducer},96809:(a,e,t)=>{t.d(e,{K:()=>d});var r=t(23464),s=t(59959);class i{async get(a,e){return this.api.get(a,e)}async post(a,e,t){return this.api.post(a,e,t)}async put(a,e,t){return this.api.put(a,e,t)}async patch(a,e,t){return this.api.patch(a,e,t)}async delete(a,e){return this.api.delete(a,e)}async uploadFile(a,e,t){let r=new FormData;return r.append("file",e),this.api.post(a,r,{...t,headers:{...null==t?void 0:t.headers,"Content-Type":"multipart/form-data"}})}constructor(){this.api=r.A.create({baseURL:"/api",timeout:3e4,headers:{"Content-Type":"application/json"}}),this.api.interceptors.request.use(a=>{let e=s.y.getAccessToken();return e&&(a.headers.Authorization="Bearer ".concat(e)),a},a=>Promise.reject(a)),this.api.interceptors.response.use(a=>a,async a=>{var e;if((null==(e=a.response)?void 0:e.status)===401){let e=s.y.getRefreshToken();if(e)try{let{access_token:t,refresh_token:r}=(await this.api.post("/auth/refresh",{refresh_token:e})).data;return s.y.setTokens({access_token:t,refresh_token:r,token_type:"bearer",expires_in:3600}),a.config.headers.Authorization="Bearer ".concat(t),this.api.request(a.config)}catch(a){s.y.logout(),window.location.href="/login"}else s.y.logout(),window.location.href="/login"}return Promise.reject(a)})}}let d=new i}}]);