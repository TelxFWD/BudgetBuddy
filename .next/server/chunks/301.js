exports.id=301,exports.ids=[301],exports.modules={10535:(e,a,t)=>{"use strict";t.d(a,{F:()=>i,y:()=>n});var r=t(51060);let s=process.env.NEXT_PUBLIC_API_URL||"/api",i=r.A.create({baseURL:s,headers:{"Content-Type":"application/json"}}),n={async login(e){let{access_token:a,refresh_token:t,token_type:r,expires_in:s}=(await i.post("/auth/login",e)).data,n={access_token:a,refresh_token:t,token_type:r,expires_in:s};this.setTokens(n);let o=(await i.get("/auth/me",{headers:{Authorization:`Bearer ${a}`}})).data;return this.setUser(o),{tokens:n,user:o}},async register(e){let{access_token:a,refresh_token:t,token_type:r,expires_in:s}=(await i.post("/auth/register",e)).data,n={access_token:a,refresh_token:t,token_type:r,expires_in:s};this.setTokens(n);let o=(await i.get("/auth/me",{headers:{Authorization:`Bearer ${a}`}})).data;return this.setUser(o),{tokens:n,user:o}},async sendTelegramOTP(e){await i.post("/auth/telegram/send-otp",e)},async verifyTelegramOTP(e){let{access_token:a,refresh_token:t,token_type:r,expires_in:s}=(await i.post("/auth/telegram/verify-otp",e)).data,n={access_token:a,refresh_token:t,token_type:r,expires_in:s};this.setTokens(n);let o=(await i.get("/auth/me",{headers:{Authorization:`Bearer ${a}`}})).data;return this.setUser(o),{tokens:n,user:o}},async refreshToken(e){let a=(await i.post("/auth/refresh",{refresh_token:e})).data;return this.setTokens(a),a},async getCurrentUser(){let e=this.getTokens();if(!e)throw Error("No authentication tokens found");let a=(await i.get("/auth/me",{headers:{Authorization:`Bearer ${e.access_token}`}})).data;return this.setUser(a),a},setTokens(e){},getTokens:()=>null,setUser(e){},getUser:()=>null,logout(){},isAuthenticated(){let e=this.getTokens();return!!e?.access_token},getAccessToken(){let e=this.getTokens();return e?.access_token||null},getRefreshToken(){let e=this.getTokens();return e?.refresh_token||null},async sendOTP(e){return this.sendTelegramOTP({phone_number:e})},async verifyOTP(e,a){let t=await this.verifyTelegramOTP({phone_number:e,otp_code:a});return{access_token:t.tokens.access_token,refresh_token:t.tokens.refresh_token}}};i.interceptors.request.use(e=>{let a=n.getTokens();return a?.access_token&&(e.headers.Authorization=`Bearer ${a.access_token}`),e}),i.interceptors.response.use(e=>e,async e=>{if(e.response?.status===401){let a=n.getTokens();if(a?.refresh_token)try{let t=await n.refreshToken(a.refresh_token),r=e.config;return r.headers.Authorization=`Bearer ${t.access_token}`,i(r)}catch{n.logout(),window.location.href="/login"}else n.logout(),window.location.href="/login"}return Promise.reject(e)})},15888:(e,a,t)=>{"use strict";t.d(a,{Providers:()=>o});var r=t(60687);t(43210);var s=t(54864),i=t(37590),n=t(41135);function o({children:e}){return(0,r.jsxs)(s.Kq,{store:n.M_,children:[e,(0,r.jsx)(i.l$,{position:"top-right",toastOptions:{duration:4e3,style:{background:"rgba(55, 65, 81, 0.95)",color:"#fff",border:"1px solid rgba(75, 85, 99, 0.5)",borderRadius:"12px",backdropFilter:"blur(10px)",fontSize:"14px"},success:{iconTheme:{primary:"#10b981",secondary:"#fff"}},error:{iconTheme:{primary:"#ef4444",secondary:"#fff"}}}})]})}},17723:(e,a,t)=>{Promise.resolve().then(t.bind(t,48150))},17993:(e,a,t)=>{"use strict";t.d(a,{Ay:()=>c,Ez:()=>n,NC:()=>o,VE:()=>i});var r=t(76067),s=t(33071);let i=(0,r.zD)("analytics/fetchAnalytics",async(e,{rejectWithValue:a})=>{try{return(await s.K.get("/analytics/user")).data}catch(e){return a(e.response?.data?.detail||"Failed to fetch analytics")}}),n=(0,r.zD)("analytics/fetchMessageVolume",async({days:e=7},{rejectWithValue:a})=>{try{return(await s.K.get(`/analytics/message-volume?days=${e}`)).data}catch(e){return a(e.response?.data?.detail||"Failed to fetch message volume")}}),o=(0,r.zD)("analytics/fetchErrorSummary",async({days:e=7},{rejectWithValue:a})=>{try{return(await s.K.get(`/analytics/errors?days=${e}`)).data}catch(e){return a(e.response?.data?.detail||"Failed to fetch error summary")}}),d=(0,r.Z0)({name:"analytics",initialState:{stats:null,messageVolume:[],errorSummary:[],isLoading:!1,error:null},reducers:{clearError:e=>{e.error=null}},extraReducers:e=>{e.addCase(i.pending,e=>{e.isLoading=!0,e.error=null}).addCase(i.fulfilled,(e,a)=>{e.isLoading=!1,e.stats=a.payload}).addCase(i.rejected,(e,a)=>{e.isLoading=!1,e.error=a.payload}).addCase(n.fulfilled,(e,a)=>{e.messageVolume=a.payload}).addCase(n.rejected,(e,a)=>{e.error=a.payload}).addCase(o.fulfilled,(e,a)=>{e.errorSummary=a.payload}).addCase(o.rejected,(e,a)=>{e.error=a.payload})}}),{clearError:l}=d.actions,c=d.reducer},21056:(e,a,t)=>{Promise.resolve().then(t.t.bind(t,86346,23)),Promise.resolve().then(t.t.bind(t,27924,23)),Promise.resolve().then(t.t.bind(t,35656,23)),Promise.resolve().then(t.t.bind(t,40099,23)),Promise.resolve().then(t.t.bind(t,38243,23)),Promise.resolve().then(t.t.bind(t,28827,23)),Promise.resolve().then(t.t.bind(t,62763,23)),Promise.resolve().then(t.t.bind(t,97173,23))},33071:(e,a,t)=>{"use strict";t.d(a,{K:()=>n});var r=t(51060),s=t(10535);class i{constructor(){this.api=r.A.create({baseURL:"/api",timeout:3e4,headers:{"Content-Type":"application/json"}}),this.api.interceptors.request.use(e=>{let a=s.y.getAccessToken();return a&&(e.headers.Authorization=`Bearer ${a}`),e},e=>Promise.reject(e)),this.api.interceptors.response.use(e=>e,async e=>{if(e.response?.status===401){let a=s.y.getRefreshToken();if(a)try{let{access_token:t,refresh_token:r}=(await this.api.post("/auth/refresh",{refresh_token:a})).data;return s.y.setTokens({access_token:t,refresh_token:r,token_type:"bearer",expires_in:3600}),e.config.headers.Authorization=`Bearer ${t}`,this.api.request(e.config)}catch(e){s.y.logout(),window.location.href="/login"}else s.y.logout(),window.location.href="/login"}return Promise.reject(e)})}async get(e,a){return this.api.get(e,a)}async post(e,a,t){return this.api.post(e,a,t)}async put(e,a,t){return this.api.put(e,a,t)}async patch(e,a,t){return this.api.patch(e,a,t)}async delete(e,a){return this.api.delete(e,a)}async uploadFile(e,a,t){let r=new FormData;return r.append("file",a),this.api.post(e,r,{...t,headers:{...t?.headers,"Content-Type":"multipart/form-data"}})}}let n=new i},41135:(e,a,t)=>{"use strict";t.d(a,{M_:()=>y,jL:()=>f,GV:()=>m});var r=t(76067),s=t(54864),i=t(56423),n=t(85284);let o=(0,r.Z0)({name:"notifications",initialState:{notifications:[]},reducers:{addNotification:(e,a)=>{let t={...a.payload,id:Date.now().toString(),timestamp:Date.now(),read:!1};e.notifications.unshift(t)},markAsRead:(e,a)=>{let t=e.notifications.find(e=>e.id===a.payload);t&&(t.read=!0)},removeNotification:(e,a)=>{e.notifications=e.notifications.filter(e=>e.id!==a.payload)},clearAllNotifications:e=>{e.notifications=[]}}}),{addNotification:d,markAsRead:l,removeNotification:c,clearAllNotifications:u}=o.actions,h=o.reducer;var g=t(73608),p=t(17993);let y=(0,r.U1)({reducer:{auth:i.Ay,dashboard:n.Ay,notifications:h,forwarding:g.Ay,analytics:p.Ay},middleware:e=>e({serializableCheck:{ignoredActions:["persist/PERSIST"]}})}),f=()=>(0,s.wA)(),m=s.d4},48150:(e,a,t)=>{"use strict";t.d(a,{Providers:()=>r});let r=(0,t(12907).registerClientReference)(function(){throw Error("Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.")},"/home/runner/workspace/src/components/providers.tsx","Providers")},56423:(e,a,t)=>{"use strict";t.d(a,{Ay:()=>p,HW:()=>l,iD:()=>i,kz:()=>d,ri:()=>u});var r=t(76067),s=t(10535);let i=(0,r.zD)("auth/login",async(e,{rejectWithValue:a})=>{try{return await s.y.login(e)}catch(e){return a(e.message||"Login failed")}}),n=(0,r.zD)("auth/sendTelegramOTP",async(e,{rejectWithValue:a})=>{try{return await s.y.sendTelegramOTP(e)}catch(e){return a(e.message||"Failed to send OTP")}}),o=(0,r.zD)("auth/verifyTelegramOTP",async(e,{rejectWithValue:a})=>{try{return await s.y.verifyTelegramOTP(e)}catch(e){return a(e.message||"OTP verification failed")}}),d=(0,r.zD)("auth/register",async(e,{rejectWithValue:a})=>{try{return await s.y.register(e)}catch(e){return a(e.message||"Registration failed")}}),l=(0,r.zD)("auth/getCurrentUser",async(e,{rejectWithValue:a})=>{try{return await s.y.getCurrentUser()}catch(e){return a(e.message||"Failed to get user info")}}),c=(0,r.Z0)({name:"auth",initialState:{user:null,tokens:null,isLoading:!1,error:null},reducers:{logout:e=>{e.user=null,e.tokens=null,e.error=null,s.y.logout()},clearError:e=>{e.error=null},setTokens:(e,a)=>{e.tokens=a.payload}},extraReducers:e=>{e.addCase(i.pending,e=>{e.isLoading=!0,e.error=null}).addCase(i.fulfilled,(e,a)=>{e.isLoading=!1,e.tokens=a.payload.tokens,e.user=a.payload.user}).addCase(i.rejected,(e,a)=>{e.isLoading=!1,e.error=a.payload}).addCase(d.pending,e=>{e.isLoading=!0,e.error=null}).addCase(d.fulfilled,(e,a)=>{e.isLoading=!1,e.tokens=a.payload.tokens,e.user=a.payload.user}).addCase(d.rejected,(e,a)=>{e.isLoading=!1,e.error=a.payload}).addCase(n.pending,e=>{e.isLoading=!0,e.error=null}).addCase(n.fulfilled,e=>{e.isLoading=!1}).addCase(n.rejected,(e,a)=>{e.isLoading=!1,e.error=a.payload}).addCase(o.pending,e=>{e.isLoading=!0,e.error=null}).addCase(o.fulfilled,(e,a)=>{e.isLoading=!1,e.tokens=a.payload.tokens,e.user=a.payload.user}).addCase(o.rejected,(e,a)=>{e.isLoading=!1,e.error=a.payload}).addCase(l.fulfilled,(e,a)=>{e.user=a.payload})}}),{logout:u,clearError:h,setTokens:g}=c.actions,p=c.reducer},57504:(e,a,t)=>{Promise.resolve().then(t.t.bind(t,16444,23)),Promise.resolve().then(t.t.bind(t,16042,23)),Promise.resolve().then(t.t.bind(t,88170,23)),Promise.resolve().then(t.t.bind(t,49477,23)),Promise.resolve().then(t.t.bind(t,29345,23)),Promise.resolve().then(t.t.bind(t,12089,23)),Promise.resolve().then(t.t.bind(t,46577,23)),Promise.resolve().then(t.t.bind(t,31307,23))},61135:()=>{},70867:(e,a,t)=>{Promise.resolve().then(t.bind(t,15888))},73608:(e,a,t)=>{"use strict";t.d(a,{kq:()=>l,Ay:()=>_,Ve:()=>u,he:()=>d,v:()=>c});var r=t(76067),s=t(51060);let i="https://your-backend-domain.com";class n{getAuthHeaders(){let e=localStorage.getItem("access_token");return{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}}async getForwardingPairs(){return(await s.A.get(`${i}/api/forwarding/pairs`,{headers:this.getAuthHeaders()})).data}async createForwardingPair(e){return(await s.A.post(`${i}/api/forwarding/pairs`,e,{headers:this.getAuthHeaders()})).data}async updateForwardingPair(e,a){return(await s.A.patch(`${i}/api/forwarding/pairs/${e}`,a,{headers:this.getAuthHeaders()})).data}async deleteForwardingPair(e){await s.A.delete(`${i}/api/forwarding/pairs/${e}`,{headers:this.getAuthHeaders()})}async pauseForwardingPair(e){return(await s.A.post(`${i}/api/forwarding/pairs/${e}/pause`,{},{headers:this.getAuthHeaders()})).data}async resumeForwardingPair(e){return(await s.A.post(`${i}/api/forwarding/pairs/${e}/resume`,{},{headers:this.getAuthHeaders()})).data}async bulkPairOperation(e){await s.A.post(`${i}/api/forwarding/pairs/bulk`,e,{headers:this.getAuthHeaders()})}async getTelegramAccounts(){return(await s.A.get(`${i}/api/accounts/telegram`,{headers:this.getAuthHeaders()})).data}async getDiscordAccounts(){return(await s.A.get(`${i}/api/accounts/discord`,{headers:this.getAuthHeaders()})).data}async addTelegramAccount(e){return(await s.A.post(`${i}/api/accounts/telegram`,{phone_number:e},{headers:this.getAuthHeaders()})).data}async verifyTelegramOTP(e,a){return(await s.A.post(`${i}/api/accounts/telegram/verify`,{phone_number:e,otp_code:a},{headers:this.getAuthHeaders()})).data}async removeTelegramAccount(e){await s.A.delete(`${i}/api/accounts/telegram/${e}`,{headers:this.getAuthHeaders()})}async addDiscordAccount(e){return(await s.A.post(`${i}/api/accounts/discord`,{discord_token:e},{headers:this.getAuthHeaders()})).data}async removeDiscordAccount(e){await s.A.delete(`${i}/api/accounts/discord/${e}`,{headers:this.getAuthHeaders()})}async getTelegramChannels(e){return(await s.A.get(`${i}/api/accounts/telegram/${e}/channels`,{headers:this.getAuthHeaders()})).data}async getDiscordServers(e){return(await s.A.get(`${i}/api/accounts/discord/${e}/servers`,{headers:this.getAuthHeaders()})).data}async getQueueStatus(){return(await s.A.get(`${i}/api/analytics/queue-status`,{headers:this.getAuthHeaders()})).data}async getSessionHealth(){return(await s.A.get(`${i}/api/analytics/session-health`,{headers:this.getAuthHeaders()})).data}async getPlanLimits(){return(await s.A.get(`${i}/api/forwarding/plan-limits`,{headers:this.getAuthHeaders()})).data}startRealTimeSync(e){let a=[];if(e.onPairUpdate){let t=setInterval(async()=>{try{(await this.getForwardingPairs()).forEach(e.onPairUpdate)}catch(e){console.error("Failed to fetch pair updates:",e)}},1e4);a.push(t)}if(e.onSessionHealthUpdate){let t=setInterval(async()=>{try{let a=await this.getSessionHealth();e.onSessionHealthUpdate(a)}catch(e){console.error("Failed to fetch session health:",e)}},3e4);a.push(t)}if(e.onQueueStatusUpdate){let t=setInterval(async()=>{try{let a=await this.getQueueStatus();e.onQueueStatusUpdate(a)}catch(e){console.error("Failed to fetch queue status:",e)}},15e3);a.push(t)}return()=>{a.forEach(clearInterval)}}}let o=new n,d=(0,r.zD)("forwarding/fetchPairs",async()=>await o.getForwardingPairs()),l=(0,r.zD)("forwarding/createPair",async e=>await o.createForwardingPair(e)),c=(0,r.zD)("forwarding/updatePair",async({pairId:e,updates:a})=>await o.updateForwardingPair(e,a)),u=(0,r.zD)("forwarding/deletePair",async e=>(await o.deleteForwardingPair(e),e)),h=(0,r.zD)("forwarding/pausePair",async e=>await o.pauseForwardingPair(e)),g=(0,r.zD)("forwarding/resumePair",async e=>await o.resumeForwardingPair(e)),p=(0,r.zD)("forwarding/bulkOperation",async e=>(await o.bulkPairOperation(e),e)),y=(0,r.zD)("forwarding/fetchTelegramAccounts",async()=>await o.getTelegramAccounts()),f=(0,r.zD)("forwarding/fetchDiscordAccounts",async()=>await o.getDiscordAccounts());(0,r.zD)("forwarding/addTelegramAccount",async e=>await o.addTelegramAccount(e));let m=(0,r.zD)("forwarding/verifyTelegramOTP",async({phoneNumber:e,otpCode:a})=>await o.verifyTelegramOTP(e,a)),w=(0,r.zD)("forwarding/removeTelegramAccount",async e=>(await o.removeTelegramAccount(e),e)),A=(0,r.zD)("forwarding/addDiscordAccount",async e=>await o.addDiscordAccount(e)),P=(0,r.zD)("forwarding/removeDiscordAccount",async e=>(await o.removeDiscordAccount(e),e)),v=(0,r.zD)("forwarding/fetchQueueStatus",async()=>await o.getQueueStatus()),k=(0,r.zD)("forwarding/fetchSessionHealth",async()=>await o.getSessionHealth()),T=(0,r.zD)("forwarding/fetchPlanLimits",async()=>await o.getPlanLimits()),C=(0,r.Z0)({name:"forwarding",initialState:{pairs:[],telegramAccounts:[],discordAccounts:[],selectedAccount:null,isLoading:!1,error:null,queueStatus:null,sessionHealth:null,planLimits:null},reducers:{setSelectedAccount:(e,a)=>{e.selectedAccount=a.payload},clearError:e=>{e.error=null},updatePairStatus:(e,a)=>{let{pairId:t,status:r}=a.payload,s=e.pairs.find(e=>e.id===t);s&&(s.queue_status=r)},updateSessionHealth:(e,a)=>{e.sessionHealth=a.payload,a.payload.telegram_sessions&&Object.entries(a.payload.telegram_sessions).forEach(([a,t])=>{let r=e.telegramAccounts.find(e=>e.id===parseInt(a));r&&(r.status=t.status)}),a.payload.discord_sessions&&Object.entries(a.payload.discord_sessions).forEach(([a,t])=>{let r=e.discordAccounts.find(e=>e.id===parseInt(a));r&&(r.status=t.status)})},updateQueueStatus:(e,a)=>{e.queueStatus=a.payload}},extraReducers:e=>{e.addCase(d.pending,e=>{e.isLoading=!0,e.error=null}).addCase(d.fulfilled,(e,a)=>{e.isLoading=!1,e.pairs=a.payload}).addCase(d.rejected,(e,a)=>{e.isLoading=!1,e.error=a.error.message||"Failed to fetch forwarding pairs"}).addCase(l.fulfilled,(e,a)=>{e.pairs.push(a.payload)}).addCase(c.fulfilled,(e,a)=>{let t=e.pairs.findIndex(e=>e.id===a.payload.id);-1!==t&&(e.pairs[t]=a.payload)}).addCase(u.fulfilled,(e,a)=>{e.pairs=e.pairs.filter(e=>e.id!==a.payload)}).addCase(h.fulfilled,(e,a)=>{let t=e.pairs.findIndex(e=>e.id===a.payload.id);-1!==t&&(e.pairs[t]=a.payload)}).addCase(g.fulfilled,(e,a)=>{let t=e.pairs.findIndex(e=>e.id===a.payload.id);-1!==t&&(e.pairs[t]=a.payload)}).addCase(p.fulfilled,(e,a)=>{let{action:t,pair_ids:r}=a.payload;"delete"===t?e.pairs=e.pairs.filter(e=>!r.includes(e.id)):e.pairs.forEach(e=>{r.includes(e.id)&&(e.is_active="resume"===t)})}),e.addCase(y.fulfilled,(e,a)=>{e.telegramAccounts=a.payload}).addCase(m.fulfilled,(e,a)=>{e.telegramAccounts.push(a.payload)}).addCase(w.fulfilled,(e,a)=>{e.telegramAccounts=e.telegramAccounts.filter(e=>e.id!==a.payload)}),e.addCase(f.fulfilled,(e,a)=>{e.discordAccounts=a.payload}).addCase(A.fulfilled,(e,a)=>{e.discordAccounts.push(a.payload)}).addCase(P.fulfilled,(e,a)=>{e.discordAccounts=e.discordAccounts.filter(e=>e.id!==a.payload)}),e.addCase(v.fulfilled,(e,a)=>{e.queueStatus=a.payload}).addCase(k.fulfilled,(e,a)=>{e.sessionHealth=a.payload}).addCase(T.fulfilled,(e,a)=>{e.planLimits=a.payload}),e.addMatcher(e=>e.type.endsWith("/rejected"),(e,a)=>{e.isLoading=!1,e.error=a.error?.message||"An error occurred"})}}),{setSelectedAccount:b,clearError:D,updatePairStatus:S,updateSessionHealth:$,updateQueueStatus:z}=C.actions,_=C.reducer},85284:(e,a,t)=>{"use strict";t.d(a,{Ay:()=>h,ER:()=>o,DA:()=>n,T5:()=>l,$m:()=>c});var r=t(76067),s=t(10535);let i={getUserStats:async()=>(await s.F.get("/analytics/user-stats")).data,getSystemHealth:async()=>(await s.F.get("/health")).data},n=(0,r.zD)("dashboard/fetchUserStats",async(e,{rejectWithValue:a})=>{try{return await i.getUserStats()}catch(e){return a(e.message||"Failed to fetch user stats")}}),o=(0,r.zD)("dashboard/fetchSystemHealth",async(e,{rejectWithValue:a})=>{try{return await i.getSystemHealth()}catch(e){return a(e.message||"Failed to fetch system health")}}),d=(0,r.Z0)({name:"dashboard",initialState:{stats:null,health:null,isLoading:!1},reducers:{updateForwardingPairStatus:(e,a)=>{let{pairId:t,status:r,lastForwarded:s}=a.payload;e.stats},updateStats:(e,a)=>{let{queueStats:t}=a.payload;e.stats&&(e.stats={...e.stats,...t})},updateRealTimeMetrics:(e,a)=>{let t=a.payload;e.stats&&(e.stats={...e.stats,...t})}},extraReducers:e=>{e.addCase(n.pending,e=>{e.isLoading=!0}).addCase(n.fulfilled,(e,a)=>{e.isLoading=!1,e.stats=a.payload}).addCase(n.rejected,e=>{e.isLoading=!1}).addCase(o.fulfilled,(e,a)=>{e.health=a.payload})}}),{updateForwardingPairStatus:l,updateStats:c,updateRealTimeMetrics:u}=d.actions,h=d.reducer},94431:(e,a,t)=>{"use strict";t.r(a),t.d(a,{default:()=>d,metadata:()=>o});var r=t(37413),s=t(7339),i=t.n(s);t(61135);var n=t(48150);let o={title:"AutoForwardX - Message Forwarding Dashboard",description:"Manage your Telegram and Discord message forwarding with ease"};function d({children:e}){return(0,r.jsx)("html",{lang:"en",className:"dark",children:(0,r.jsx)("body",{className:`${i().className} bg-dark-bg text-dark-text min-h-screen`,children:(0,r.jsx)(n.Providers,{children:e})})})}}};